openapi: 3.0.1
info:
  version: 1.0.0
  title: Fiber News
  description: "Aquesta és la documentació Open API per la REST API de la nostra estimada aplicació **Fiber News** publicada a <https://whispering-plains-92135.herokuapp.com/>. <br>Totes les operacions són executables. Les operacions //dir quines xd requereixen d'autentificació per ser executades. Pots obtenir l'api_key si vas a l'apartat d'editar perfil dins de l'aplicació."
servers:
  - url: 'http://3.83.227.28:8080'
paths:
  /api/submissions:
    get:
      tags:
      - submissions
      summary: Retrieves all the submissions posted on the app
      description: Returns a set of submissions
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'
                
  /api/submissions/user/{user_id}:
    get:
      tags:
      - submissions
      summary: Retrieves all the submissions posted from the user with id user_id
      description: Returns a set of submissions
      parameters:
      - name: user_id
        in: path
        description: ID of the user
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        433:
          description: User does not exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error433'
                  
  /api/submissions/upvoted/user/{user_id}:
    get:
        tags:
        - submissions
        summary: Retrieves all the upvoted submissions from the user with id user_id
        description: Returns a set of submissions
        parameters:
        - name: user_id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
        responses:
          200:
            description: successful operation
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Submission'
          404:
            description: 'Error: Not Found'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorExample:
                    $ref: '#/components/examples/error404'
          433:
            description: User does not exists
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResult'
                examples:
                  errorExample:
                    $ref: '#/components/examples/error433'
                    
  /submissions/{postid}/api:
    get:
      tags:
      - submissions
      summary: Retrieves all the comments of a submission by its postid
      description: Returns a set of comments
      operationId: XDXDXDXD
      parameters:
      - name: postid
        in: path
        description: ID of the submission whose comments to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tweet'
  
  /api/submissions/{submission_id}/comment:
    post:
      tags:
      - comments
      summary: Comments the submission identified with submission_id
      parameters:
      - name: submission_id
        in: path
        description: ID of the submission whose comments to return
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text: 
                  type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
                
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        432:
          description: 'Error: Submission does not exists'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error432'
      security:
      - ApiKeyAuth: []
      
  /api/comments/liked/user/{user_id}:
    get:
      tags:
      - comments
      summary: Retrieves all the liked comments from the user with id user_id
      description: Returns a set of comments
      parameters:
      - name: user_id
        in: path
        description: ID of the user
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        433:
          description: User does not exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error433'
                  
  /api/comments/{commentId}:
    post:
      tags: 
      - comments
      summary: Reply the comment identified by commentId
      description: Returns the comment created

      parameters: 
      - name: commentId
        in: path
        description: ID of the comment that will be replied
        required: true
        schema:
          type: integer
          format: int64
          
      requestBody:
        description: Provide the content of the comment
        required: true
        content:
          application/json:
            schema:
              required:
              - text
              type: object
              properties:
                text:
                  type: string
                  example: 'This is an example comment'
      
        
      responses:
        201:
          description: object created
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          description: 'Error: Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
      security:
      - ApiKeyAuth: []
                
                  
  /api/users/{userId}:
    get:
      tags:
      - user
      summary: Retives the information about the user identified with userId. 
      description: Returns the information stored about the user.
      parameters:
      - name: userId
        in: path
        description: ID of the user whose information to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        433:
          description: User does not exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error433'
  /tweets/{tweetId}:
    get:
      tags:
      - tweets
      summary: Finds a Tweet by its ID
      description: Returns a single Tweet
      operationId: getTweetById
      parameters:
      - name: tweetId
        in: path
        description: ID of Tweet to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tweet'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
    delete:
      tags:
      - tweets
      summary: Deletes a Tweet
      operationId: deleteTweet
      parameters:
      - name: tweetId
        in: path
        description: Tweet id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: Tweet deleted
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
        403:
          description: 'Error: Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error403'
      security:
      - ApiKeyAuth: []
  /tweets/{tweetId}/likes:
    post:
      tags:
      - tweets
      summary: Likes a Tweet
      operationId: likeTweet
      parameters:
      - name: tweetId
        in: path
        description: Tweet id to like
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Liked Tweet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tweet'
        404:
          description: 'Error: Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error404'
components:
  schemas:
    Submission:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 22
        user_id:
          type: integer
          format: int64
          example: 1
        url:
          type: string
          example: "https://atenea.upc.edu/mod/page/view.php?id=3328883"
        title:
          type: string
          example : "soy un post"
        created_at:
          type: string
          example: "2022/06/23 13:00:000 UTC"
        updated_at:
          type: string
          example: "2022/06/23 13:00:000 UTC"
        votes:
          type: integer
          example: 32
        text:
          type: string
          example: "Soy un texto de ejemplo, aqui va el cuerpo de la submission si es de tipo ask"
    Likedsubmission:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        user_id:
          type: integer
          format: int64
          example: 1
        submission_id:
          type: integer
          format: int64
          example: 1
        created_at:
          type: string
          example: "2022/06/23 13:00:000 UTC"
        updated_at:
          type: string
          example: "2022/06/23 13:00:000 UTC"
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        user_id:
          type: integer
          format: int64
          example: 1
        post_id:
          type: integer
          format: int64
          example: 1
        parentid:
          type: integer
          format: int64
          example: 2
        likes:
          type: integer
          format: int64
          example: 10
        text:
          type: string
          example: "Soy un texto de ejemplo, aqui va el cuerpo del comment."
        created_at:
          type: string
          example: "2022/06/23 13:00:000 UTC"
        updated_at:
          type: string
          example: "2022/06/23 13:00:000 UTC"
    Likedcomment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        user_id:
          type: integer
          format: int64
          example: 1
        comment_id:
          type: integer
          format: int64
          example: 4
        created_at:
          type: string
          example: "2022/06/23 13:00:000 UTC"
        updated_at:
          type: string
          example: "2022/06/23 13:00:000 UTC"
    User:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 1
        name:
          type: string
          format: string
          example: "Quim Motger"
        email:
          type: string
          format: string
          example: "quim.motger@estudiantat.upc.edu"
        karma:
          type: integer
          format: int64
          example: 1
        about:
          type: string
          format: string
          example: "Soc un estudiant de la FIB"
        created_at:
          type: string
          example: "2022/06/23 13:00:000 UTC"
        updated_at:
          type: string
          example: "2022/06/23 13:00:000 UTC"
    
      
        
          
    Tweet:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        author:
          type: string
          minLength: 4
          example: 'My name'
        content:
          type: string
          minLength: 4
          maxLength: 280
          example: 'My content'
        likes:
          type: integer
          format: int32
        created_at:
          type: string
          format: date-time
        _links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: 'https://asw-api-demo.herokuapp.com/tweets/2'
    AddTweetResult:
      type: object
      properties:
        new_tweet:
          $ref: '#/components/schemas/Tweet'
        api_key:
          type: string
          example: "MjAyMC0wNC0xOCAxMjoyODo0MSBVVEM=\n"
    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum: [400, 401, 403, 404, 409, 433, 432]
        error: 
          type: string
          enum: ["Bad Request", "Unauthorized", "Forbidden", "Not Found", "Conflict", "User not exists", "Submission does not exists"]
        message: 
          type: string
  examples:
    error400:
      value:
        status: 400
        error: "Bad Request"
        message: "Content is too long (maximum is 280 characters)"
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "You provided no api key (X-API-KEY Header)"
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "Your api key (X-API-KEY Header) is not valid"
    error404:
      value:
        status: 404
        error: "Not Found"
        message: "Bad request"
    error409:
      value:
        status: 409
        error: "Conflict"
        message: "There was a conflict"
    error433:
      value:
        status: 433
        error: "The user does not exists"
    error432:
      value:
        status: 432
        error: "It does not exists any submissions with the same id as provided"
    
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-KEY #Custom headers in rails apps must have the X- prefix
      in: header
      